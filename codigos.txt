este archivo es uno feo
para poder estar trabajando con estos se necesitan unos
comandos especiales por ejemplo:
*******COMANDOS BASICOS*******
ls -a: este muestra todo el contenido de un directorio
code .:comando que permite abrir el directorio en un editor de 
    codigo o texto en este caso VSCODE
mv <origen> <destino>: es para poder mover archivos, pero en este caso 
    tambien se puede usar para cambiar el nombre de archivos
git mv <origen> <destino>: es para poder mover archivos o cambiar
    nombres, pero brincandonos el stage
    
*******Fases*******
    1. computadora
    2. stage: aqui todos los cambios se guardaran luego de darle con comandos
	se puede saltar con algunos comandos, llendo al siguiente directamente
	pero es un poco inseguro
    3. commit: aqui tambien tenemos cambios echos a los archivos pero para 
 	este punto ya se verifico, todavia se puede hacer rollback 
    4. server:

*******Git Comands*******
git init: comenzar un archivo de git con sus respectivos archivos y 
    carpetas para poder ver que cambios se hicieron y poder devolver
    entre estas.
git status: que archivos no estan o falta actualizarlos
git status -s: con esto vemos menos datos, pero solo los necesarios 
    para saber los cambios a agregar o borrar
git add: agregar los archivos a stage
    esto se hace si los archivos estan modificados o si queremos
    agregarlos, pero se guardan en stage las modificaciones
    no los archivos en si
git commit -m "mensaje con sentido": esto es para poder comprometer o
    commit el trabajando, los cambios seran comprometidos
    de este modo ya no estaran los archivos en la face de 
rm <archivo>: esto es para poder borrar el archivo, pero ese cambio
    se pasara a el stage por lo tanto tenemos que agregar el cambio
    pero si el archivo ya estaba en COMMIT es necesario ejecutar 
    un comando COMMIT para poder guardar esos cambios
git rm <archivo>: es lo mismo que el anterior pero nos saltamos la
    fase de stage, directo al commit
    si se necesita restaurar el stage solo es necesario usar el 
    "git restore --stage <archivo>" y asi se unstage
git restore <archivo>: de este modo los cambios echos al archivo se pueden
    recuperar, en este caso de el stage a la computadora
git diff: muestra todos los cambios que hariamos o que estamos por hacer
    por ejemplo si borraste una linea o diste un salto de linea
git diff --staged: muestra lo mismo que el anterior pero este es
    para la etapa de stage.
git log:se usa para poder ver los cambios que hemos echos en este 
    caso todos los commit
git log --oneline: ahora resume mucho mas la informacion de los 
    commit echos para que sea mas digerible
*******RAMAS Y SU MANEJO*******
git branch: es para saber si estamos en main o en que rama trabajamos
git checkout -b <nombre rama>: es para poder crear una rama separada
    al main y poder tener otro marco de trabajo, sin afectar a main
    en caso de fallar
git ckeckout <nombre rama>: con esto nosotros nos cambiamos de rama
    NO SE CREA UNA
cat <archivo>: ver el contenido de el archivo en la consola
git merge <nombre rama secundaria>: estando en la rama master o main
    podemos juntar ramas secundarias para asi guardar los cambios
    de esta en la principal

*******Subir a GITHUB*******
luego de crear el repositorio agregamos el codigo que tenga la URL
    git remote add origin https://github.com/elkelvinx/myWeb.git
luego lo ponemos en la consola, por ultimo ponemos este codigo
    git push -u origin master
git push: es el comando que sube los cambios respecto a la rama en la 
    estamos trabajando, pero Master no existe en GITHUB, por eso usamos
    "-u" para crear la rama

*******TIPOS DE ARCHIVOS*******
.env= por si queremos guardar contrasenas o algun dato confidencial que solo
    queremos en nuestra pc y no en el commit
.gitignore= para evitar subir archivos por error al commit, por ejemplo
    el .env que tiene contrasenas o datos delicados

*******GIT BASH*******
nano .<archivo>: en este caso es para modificar un archivo de texto
nano .bashsrc: archivo que tiene el estilo de el git bash


NEGROS